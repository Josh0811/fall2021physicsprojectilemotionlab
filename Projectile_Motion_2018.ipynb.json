{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'list' object has no attribute 'min'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-f39693598fb6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     44\u001b[0m              (0.05, 0.8), xycoords='axes fraction')\n\u001b[1;32m     45\u001b[0m \u001b[0;31m#Create fit line\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 46\u001b[0;31m \u001b[0mxnew\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinspace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m300\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     47\u001b[0m \u001b[0mfit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mxnew\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;36m2\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mxnew\u001b[0m \u001b[0;34m+\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     48\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'list' object has no attribute 'min'"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "\n",
    "#Create arrays for your data\n",
    "theta_array = ([48,45,39,42,51])\n",
    "ymean_array = ([.582,.648,.734,.731,.344 ])\n",
    "yerr_array = ([.005,.005,.005,.005,.005])\n",
    "\n",
    "\n",
    "#JoshWatkins\n",
    "#Create an array for your y-axis uncertainties\n",
    "\n",
    "#Reassign variables\n",
    "x = theta_array \n",
    "y = ymean_array \n",
    "dy = yerr_array \n",
    "\n",
    "#size the plot\n",
    "plt.figure(figsize=(15,10))\n",
    "\n",
    "#create scatter plot\n",
    "plt.scatter(x, y, color='blue', marker='o')\n",
    "\n",
    "#create labels\n",
    "plt.xlabel('$\\\\theta$ (degrees)')\n",
    "plt.ylabel('$y_{mean}$ (m)')\n",
    "plt.title('Height on wall vs Launcher Angle')\n",
    "\n",
    "#fitting to a 2nd degree polynomial\n",
    "c,b,a=np.polynomial.polynomial.polyfit(x,y,2,w=dy)\n",
    "\n",
    "#Annotate with values of A, B, C from best fit polynomial\n",
    "plt.annotate('A = {value:.{digits}E}'.format(value=a, digits=3),\n",
    "             (0.05, 0.9), xycoords='axes fraction')\n",
    "\n",
    "plt.annotate('B = {value:.{digits}E}'.format(value=b, digits=3),\n",
    "             (0.05, 0.85), xycoords='axes fraction')\n",
    "             \n",
    "plt.annotate('C = {value:.{digits}E}'.format(value=c, digits=3),\n",
    "             (0.05, 0.8), xycoords='axes fraction')\n",
    "#Create fit line\n",
    "xnew = np.linspace(x.min(), x.max(), 300)\n",
    "fit = a*xnew**2 + b*xnew +c\n",
    "\n",
    "plt.scatter(xnew, fit, color='red')\n",
    "plt.show()\n",
    "\n",
    "print (\"C = \",c , \"B = \",b, \"A = \",a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
